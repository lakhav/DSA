#include<iostream>
using namespace std;

class Node
{
public:
    Node* left;
    Node* right;
    int data;

    Node(int val) : data(val), left(NULL), right(NULL) {}

};

class BST
{
    Node* root;

    Node* insertRecursive(Node* root,int key)
    {
        
        if(root==NULL)
        {
            return new Node(key);
        }

        if( key < root->data)
            root->left=insertRecursive(root->left,key);
        if( key > root->data)
            root->right=insertRecursive(root->right,key);
        
        return root;
    }

public:
    BST() : root(NULL) {}
    

    void insert(int key)
    {
        root=insertRecursive(root,key);
    }

    Node* getRoot() {
        return root;
    }

    Node *searchRecursive(Node *root, int key)
    {
        if (root == NULL || root->data == key)
            return root;

        if (root->data < key)
            return searchRecursive(root->right, key);

        return searchRecursive(root->left, key);
    }

    Node *searchIterative(Node *root, int key)
    {
        while (root != NULL && root->data != key)
        {
            if (root->data < key)
                root = root->right;
            else
                root = root->left;
        }
        return root;
    }
    Node *findMax(Node *root)
    {
        if (root == NULL || root->right == NULL)
            return root;
        return findMax(root->right);
    }
    Node* findMin(Node* root)
    {
        if (root == NULL || root->left == NULL)
            return root;

        return findMin(root->left);
    }

    Node* inOrderSuccessor(Node* root,Node* node)
    {
        if (node->right!=NULL)  
            return findMin(node->right);
        
        Node *succ=NULL;

        while(root!=NULL)
        {
            if(node->data < root->data)
            {
                succ=root;
                root=root->left;
            }
            else if(node->data > root->data){
                root=root->right;
            }
            else{
                break;
            }
        }
        return succ;
        
    }
    Node *inOrderPredecessor(Node *root, Node *node)
    {
        if (node->left != NULL)
            return findMax(node->left);

        Node *pred = NULL;
        while (root != NULL)
        {
            if (node->data > root->data)
            {
                pred = root;
                root = root->right;
            }
            else if (node->data < root->data)
            {
                root = root->left;
            }
            else
            {
                break;
            }
        }
        return pred;
    }
};
void inOrder(Node* root) {
    if (root == NULL)
        return;

    inOrder(root->left);
    cout << root->data << " ";
    inOrder(root->right);
}


int main()
{
    BST bst;
    
    int keys[] = { 8, 3, 10, 1, 6, 14, 4, 7, 13 };
    int n=9;
    for (int i=0;i<n;i++)
    {
        bst.insert(keys[i]);
    }
    
    

    cout << "Inorder traversal of the BST: ";
    inOrder(bst.getRoot());

    Node* root=bst.getRoot();
    Node* search;
    search=bst.searchIterative(root,11);
    if(search)
    {
        cout<<"Elemenet Found";
    }
    else
    {
        cout<<"Not found";
    }
        

    return 0;
}
