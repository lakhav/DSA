#include <iostream>
#include <stack>
using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;
    Node(int val) : key(val), left(NULL), right(NULL) {}
};

void inOrderTraversal(Node* root) {
    stack<Node*> s;
    Node* current = root;

    while (current != NULL || !s.empty()) {
        while (current != NULL) {
            s.push(current);
            current = current->left;
        }

        current = s.top();
        s.pop();

        cout << current->key << " ";

        current = current->right;
    }
}

int main() {
    Node* root = new Node(4);
    root->left = new Node(2);
    root->right = new Node(5);
    root->left->left = new Node(1);
    root->left->right = new Node(3);

    cout << "In-order traversal using stack: ";
    inOrderTraversal(root);
    cout << endl;

    return 0;
}




//////////////////////////////////////////////



#include <iostream>
#include <unordered_map>
using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;
    Node(int val) : key(val), left(NULL), right(NULL) {}
};

Node* buildTreeUtil(int preorder[], int inorder[], int& preorderIndex, int inorderStart, int inorderEnd, unordered_map<int, int>& indexMap) {
    if (inorderStart > inorderEnd)
        return NULL;

    int rootValue = preorder[preorderIndex++];
    Node* root = new Node(rootValue);

    if (inorderStart == inorderEnd)
        return root;

    int inorderIndex = indexMap[rootValue];

    root->left = buildTreeUtil(preorder, inorder, preorderIndex, inorderStart, inorderIndex - 1, indexMap);
    root->right = buildTreeUtil(preorder, inorder, preorderIndex, inorderIndex + 1, inorderEnd, indexMap);

    return root;
}

Node* buildTreeFromPreorderInorder(int preorder[], int inorder[], int size) {
    unordered_map<int, int> indexMap;
    for (int i = 0; i < size; ++i)
        indexMap[inorder[i]] = i;

    int preorderIndex = 0;
    return buildTreeUtil(preorder, inorder, preorderIndex, 0, size - 1, indexMap);
}

void inOrderTraversal(Node* root) {
    if (root == NULL)
        return;

    inOrderTraversal(root->left);
    cout << root->key << " ";
    inOrderTraversal(root->right);
}

int main() {
    int preorder[] = {3, 9, 20, 15, 7};
    int inorder[] = {9, 3, 15, 20, 7};
    int size = sizeof(preorder) / sizeof(preorder[0]);

    Node* root = buildTreeFromPreorderInorder(preorder, inorder, size);

    cout << "In-order traversal of constructed tree: ";
    inOrderTraversal(root);
    cout << endl;

    return 0;
}


///////////////////////////



#include <iostream>
#include <unordered_map>
using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;
    Node(int val) : key(val), left(NULL), right(NULL) {}
};

Node* buildTreeUtil(int inorder[], int postorder[], int& postorderIndex, int inorderStart, int inorderEnd, unordered_map<int, int>& indexMap) {
    if (inorderStart > inorderEnd)
        return NULL;

    int rootValue = postorder[postorderIndex--];
    Node* root = new Node(rootValue);

    if (inorderStart == inorderEnd)
        return root;

    int inorderIndex = indexMap[rootValue];

    root->right = buildTreeUtil(inorder, postorder, postorderIndex, inorderIndex + 1, inorderEnd, indexMap);
    root->left = buildTreeUtil(inorder, postorder, postorderIndex, inorderStart, inorderIndex - 1, indexMap);

    return root;
}

Node* buildTreeFromInorderPostorder(int inorder[], int postorder[], int size) {
    unordered_map<int, int> indexMap;
    for (int i = 0; i < size; ++i)
        indexMap[inorder[i]] = i;

    int postorderIndex = size - 1;
    return buildTreeUtil(inorder, postorder, postorderIndex, 0, size - 1, indexMap);
}

void inOrderTraversal(Node* root) {
    if (root == NULL)
        return;

    inOrderTraversal(root->left);
    cout << root->key << " ";
    inOrderTraversal(root->right);
}

int main() {
    int inorder[] = {9, 3, 15, 20, 7};
    int postorder[] = {9, 15, 7, 20, 3};
    int size = sizeof(inorder) / sizeof(inorder[0]);

    Node* root = buildTreeFromInorderPostorder(inorder, postorder, size);

    cout << "In-order traversal of constructed tree: ";
    inOrderTraversal(root);
    cout << endl;

    return 0;
}


////////////////////////////



#include <iostream>
using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;
    Node(int val) : key(val), left(NULL), right(NULL) {}
};

Node* concatenate(Node* leftList, Node* rightList) {
    if (leftList == NULL)
        return rightList;
    if (rightList == NULL)
        return leftList;

    Node* leftLast = leftList->left;
    Node* rightLast = rightList->left;

    leftLast->right = rightList;
    rightList->left = leftLast;

    leftList->left = rightLast;
    rightLast->right = leftList;

    return leftList;
}

Node* merge(Node* root1, Node* root2) {
    if (root1 == NULL)
        return root2;
    if (root2 == NULL)
        return root1;

    Node* list1 = merge(root1->right, root2);
    Node* list2 = merge(root1->left, list1);

    root1->left = root1;
    root1->right = root1;

    return concatenate(list2, root1);
}

void printDLL(Node* head) {
    cout << "Doubly Linked List (Sorted Order): ";
    Node* current = head;

    while (current != NULL) {
        cout << current->key << " ";
        current = current->right;
        if (current == head)
            break;
    }
    cout << endl;
}

int main() {
    Node* root1 = new Node(3);
    root1->left = new Node(1);
    root1->right = new Node(5);

    Node* root2 = new Node(4);
    root2->left = new Node(2);
    root2->right = new Node(6);

    Node* mergedList = merge(root1, root2);
    printDLL(mergedList);

    return 0;
}


